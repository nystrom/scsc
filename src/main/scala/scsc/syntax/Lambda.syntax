module scsc.syntax.Lambda;

header {
  import scsc.syntax.LambdaSyntax.*;
}

body {
}

Root : Exp
  = Spacing Exp EOF
  .

Exp {paren}
  = Exp9
  .

Exp9 : Exp
  = Exp8 sp ";" Exp9  {Seq}
  | Exp8
  .

Exp8 : Exp
  = Vid sp ":=" Exp7  {Assign}
  | Exp7
  .

Exp7 : Exp
  = "letrec" Vid sp "=" Binary sp "in" Exp  {Letrec, right, 2}
  | "let" Vid sp "=" Binary sp "in" Exp     {Let, right, 2}
  | "var" Vid sp "=" Binary sp "in" Exp     {Letvar, right, 2}
  | "case" Binary sp "of" Alt ++ "|"        {Case, none, 1}
  | Binary
  .

Binary : Exp
  = Binary sp "||" Binary            {Or, left, 6}
  | Binary sp "&&" Binary            {And, left, 5}
  | Binary sp "==" Binary            {Eq, left, 4}
  | Binary sp "!=" Binary            {Ne, left, 4}
  | Binary sp "<" Binary             {Lt, left, 3}
  | Binary sp "<=" Binary            {Le, left, 3}
  | Binary sp ">" Binary             {Gt, left, 3}
  | Binary sp ">=" Binary            {Ge, left, 3}
  | Binary sp "+" Binary             {Add, left, 2}
  | Binary sp "-" Binary             {Sub, left, 2}
  | Binary sp "*" Binary             {Mul, left, 1}
  | Binary sp "/" Binary             {Div, left, 1}
  | Binary sp "%" Binary             {Mod, left, 1}
  | '-' Apply                        {Neg}
  | '!' Apply                        {Not}
  | Cid (sp Primary)+                  {Ctor1}
  | Apply
  .

Apply : Exp
  = Apply sp Primary  {App, left, 1}
  | Primary
  .

Primary : Exp
  = '(' Exp ")"
  //| Integer                       {Num, 1: scala.math.BigInt$.MODULE$.apply: scala.math.BigInt}
  | Integer                       {Num, 1: Long.parseLong: Long}
  | Vid                          {Var}
  | Cid                          {Ctor0}
  | '\\' Vid sp "->" Exp            {Lam}
  | "new" Cid (sp Primary)*        {New}
  | '«' Exp "»"                     {Residual}
  | '(' ')'                         {Unit}
  .

Alt
  = Pat sp "->" Exp
  .

Pat
  = Cid (sp Pat)* {PCtor}
  | Vid  {PVar}
  //| Integer {PNum, 1: scala.math.BigInt$.MODULE$.apply: scala.math.BigInt}
  | Integer                       {PNum, 1: Long.parseLong: Long}
  | '(' Pat ')'
  .

Integer : String
  = Digits Spacing
  .

Digits : String
  = [0-9]+
  .

Vid : String
  = rats {
    Word &{
        ! contains (KEYWORDS, yyValue) && Character.isLowerCase(yyValue.charAt(0))
    }
  }.

Cid : String
  = rats {
    Word &{
        ! contains (KEYWORDS, yyValue) && Character.isUpperCase(yyValue.charAt(0))
    }
  }.
